<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hack The Tunnels Challenges on Carleton Computer Science Society</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/challenges/</link><description>Recent content in Hack The Tunnels Challenges on Carleton Computer Science Society</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 01 Oct 2023 23:11:13 +0000</lastBuildDate><atom:link href="https://ccss.carleton.ca/hackthetunnels/2024-2025/challenges/index.xml" rel="self" type="application/rss+xml"/><item><title>10. Prevent Overlapping Events</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/overlapping-courses/</link><pubDate>Mon, 14 Oct 2024 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/overlapping-courses/</guid><description>Modify the backend to ensure that when a student creates a timetable, no two courses in the timetable overlap. If overlapping courses are detected, the timetable creation should be rejected, and an error message should be returned to the user.
Timetable creation is handled in the Timetable Service (service/src/services/Timetable.ts) inside the createTimetable method.
This method should return an error that is surfaced to the user if there are courses with conflicting times.</description></item><item><title>11. Add Max Registration Column to Scheduled Events</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/add-max-registration-column/</link><pubDate>Mon, 14 Oct 2024 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/add-max-registration-column/</guid><description>Add a &amp;ldquo;max registration&amp;rdquo; column to the scheduledEvents table in the relational database. This column should store the maximum number of students allowed to register for each scheduled event.
Checkout the schema.prisma file to get started.
Ensure that the migration is created and executed correctly, and update any relevant models or services to reflect this new column.
For help creating a Prisma migration, see this guide.
Acceptance Criteria: A migration is created to add the &amp;ldquo;max registration&amp;rdquo; column to the scheduledEvents table.</description></item><item><title>15. Send Discord Webhook</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/webhooks/</link><pubDate>Mon, 14 Oct 2024 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/webhooks/</guid><description>Set up a system that triggers a Discord webhook when a specific event happens (e.g., when a new timetable is created or a course is added).
Your task is to configure the backend so that, upon the occurrence of {x} event, a message is sent to a Discord channel via a webhook.
You can use any library or method to send the HTTP request to the Discord webhook URL.
Timetable creation is handled in the Timetable Service (service/src/services/Timetable.</description></item><item><title>17. Create a GraphQL API</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/graphql-api-implementation/</link><pubDate>Mon, 14 Oct 2024 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/graphql-api-implementation/</guid><description>Create a GraphQL API for the service. This GraphQL API will be exposed on the route POST /api/graphql.
To satisfy this challenge, implement at least one GraphQL query and one GraphQL mutation. Be sure to reuse the existing service code within the service/src/services folder to integrate with your GraphQL implementation.
If you&amp;rsquo;re not sure where to get started, check out this guide.
Acceptance Criteria: A GraphQL API is set up and accessible at the specified route.</description></item><item><title>18. Search By Program</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/search-by-program/</link><pubDate>Mon, 14 Oct 2024 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/search-by-program/</guid><description>On the BuildTimetable page, add UI that allows the user to search for courses by program (ex: COMP, MATH, etc)
To query the backend, you can either add new program query parameter to the /scheduledEvents endpoint or create a new endpoint.
Both of these would involve modifications to the scheduleEventsRouter.
Acceptance Criteria: The participant can demostrate the different results are returned for each selected program.</description></item><item><title>20. Search Course by CRN</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/add-course-crn-scheduled/</link><pubDate>Mon, 14 Oct 2024 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/add-course-crn-scheduled/</guid><description>Implement a feature on the BuildTimetable page that allows users to search for a course using the course&amp;rsquo;s CRN (Course Reference Number). The user should be able to input a CRN, and upon validation, added to the &amp;ldquo;worksheet&amp;rdquo; section of the BuildTimetable page.
The feature should include validation to ensure the CRN is valid and exists in the course database.
To query the backend, you can either add new CRN query parameter to the /scheduledEvents endpoint or create a new endpoint.</description></item><item><title>21. Scheduled Event Page With Redis</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/scheduled-event-page-caching/</link><pubDate>Mon, 14 Oct 2024 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/scheduled-event-page-caching/</guid><description>Let&amp;rsquo;s recreate this page from the original Carleton Central.
In the client, create a new page in client/src/pages that will display detailed information for a scheduled event. The page should allow users to view data about the scheduled event, including information from both the scheduled events and courses tables.
In the service API, create a new route in service/src/api/routes/scheduledEvents.ts for retrieving an individual scheduled event via /scheduledEvents/:id.
Within the ScheduledEvents service (service/src/services/ScheduledEvent.</description></item><item><title>25. Set Up GitHub Actions for Prettier</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/github-actions-prettier/</link><pubDate>Mon, 14 Oct 2024 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/github-actions-prettier/</guid><description>Create a GitHub Actions configuration that runs Prettier automatically whenever a pull request (PR) is made. The action should format the code in the specified files to maintain code style consistency across the project.
Ensure that your workflow is triggered on pull_request events and that it runs Prettier on the designated files or directories.
See an example of this on the CCSS Website repo.
Acceptance Criteria: A GitHub Actions workflow is created that runs Prettier on PRs.</description></item><item><title>5. Improve Timetable Styling</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/improve-timetable-styling/</link><pubDate>Mon, 14 Oct 2024 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/improve-timetable-styling/</guid><description>Improve the user experience by updating the styling of the &amp;lt;Timetable/&amp;gt; component to make it more visually appealing and user-friendly.
You can enhance the layout, colors, spacing, and overall design to improve clarity and usability for students.
This component has definitely got some &amp;ldquo;spaghetti code&amp;rdquo;. Have Fun :)
Acceptance Criteria: The styling of the &amp;lt;Timetable/&amp;gt; component is significantly improved, making it more visually appealing and easier to read.
(so long as it looks pretty different you can give them the points)</description></item><item><title>6. Improve Search Result Styling</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/improve-result-styling/</link><pubDate>Mon, 14 Oct 2024 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/improve-result-styling/</guid><description>Enhance the styling of the &amp;ldquo;course results&amp;rdquo; on the BuildTimetable page.
This refers to the ui that displays search results for scheduled events.
This can involve improving layout, colors, spacing, and overall design to improve clarity and visual appeal for students searching through results.
Acceptance Criteria: The styling of the course search results are significantly different (so long as it looks pretty different you can give them the points)</description></item><item><title>9. Create A CSS Animation</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/add-css-animation/</link><pubDate>Mon, 14 Oct 2024 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/add-css-animation/</guid><description>Utilize CSS Animations to add something fun to your website!
Acceptance Criteria: The participant has utilized CSS animations in some way.</description></item><item><title>12. Send Email On Timetable Create</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/email-timetable/</link><pubDate>Sat, 14 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/email-timetable/</guid><description>When a student creates a timetable, an email should be sent to the student&amp;rsquo;s email address containing details of their newly created timetable.
You can use any library to achieve this. If you&amp;rsquo;re unsure where to start, this guide demonstrates how to send emails using nodemailer with the Gmail SMTP server.
Timetable creation is handled in the Timetable Service (service/src/services/Timetable.ts) inside the createTimetable method.
Acceptance Criteria: When a student creates a timetable, an email containing the timetable details is sent to the student&amp;rsquo;s email.</description></item><item><title>13. Generate Recurring Report</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/registration-count-report/</link><pubDate>Sat, 14 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/registration-count-report/</guid><description>Create a system that generates a report on a recurring basis that has a list of all students who have created atleast one timetable.
You are free to implement the solution using any tools or libraries that fit the task.
If you&amp;rsquo;re not sure where to get started, take a look at this guide.
Acceptance Criteria: The report includes a list of all students who have created atleast one timetable.</description></item><item><title>14. Course Data Web Scraper</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/webscraper-course-data/</link><pubDate>Sat, 14 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/webscraper-course-data/</guid><description>Create a web scraper that extracts course data from the Carleton Central schedule page. The scraper should retrieve details such as course codes, titles, and available sections for a given term.
If you&amp;rsquo;re not sure where to get started, see this guide.
Acceptance Criteria: The web scraper successfully extracts course data, including course codes, titles, and sections. The scraper is able to parse data from at least one term and one program from the provided website.</description></item><item><title>16. Send Text When Timetable Is Created</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/sms/</link><pubDate>Sat, 14 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/sms/</guid><description>Utilize Twilio to send a text (SMS) to students when a timetable is created.
Note: we don&amp;rsquo;t currently collect phone numbers as part of the account creation process, so feel free to hardcode the desired phone number for this challenge.
Acceptance Criteria: When a timetable is created, an SMS message is sent to the desired phone number. The participant sets up Twilio properly to handle the SMS sending. The message sent contains relevant details about the newly created timetable.</description></item><item><title>19. Course Recommendation</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/course-recommendation-feature/</link><pubDate>Sat, 14 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/course-recommendation-feature/</guid><description>Add a way on the &amp;ldquo;BuildTimetable&amp;rdquo; page for a student to request a course recommedntation based on a time and day specified by the student.
When a user requests a recommendation, the system should return a list of available courses that fit within that time frame.
To query the backend, you can either add new query parameters to the /scheduledEvents endpoint or create a new endpoint.
Both of these would involve modifications to the scheduleEventsRouter.</description></item><item><title>2. Save Timetable Name</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/name-timetables/</link><pubDate>Sat, 14 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/name-timetables/</guid><description>Add functionality to allow users to save a custom name for their timetables. This will help users identify their timetables more easily when managing multiple schedules.
In the client, create an input field on the BuildTimetable page where users can enter a name for their timetable.
Update the createTimetable method to use the input from your newly created input element.
Utilize React&amp;rsquo;s useState hook to store the name.
Acceptance Criteria: A text input field is added on the BuildTimetable page where users can enter a name for their timetable.</description></item><item><title>22. Course Elastic Search</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/course-text-search/</link><pubDate>Sat, 14 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/course-text-search/</guid><description>On the BuildTimetable page, add a UI feature that allows users to search for &amp;ldquo;scheduled events&amp;rdquo; using a search bar. The search should query ElasticSearch to return relevant scheduled events based on course name, code, description, or any other relevant field.
In the backend, integrate ElasticSearch to index and search scheduled events from the database.
Acceptance Criteria: A search bar is added to the BuildTimetable page. The search bar allows users to query scheduled events by text (e.</description></item><item><title>23. Move JWT Secret to .env</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/jwt-env-file/</link><pubDate>Sat, 14 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/jwt-env-file/</guid><description>Currently in the codebase, the JWT secret is being hard coded&amp;hellip; this is not good (see: service/src/config/jwt.ts).
We should instead use a .env file to store sensitive information.
Acceptance Criteria: The participant instead reads the JWT secret off of the .env file.</description></item><item><title>24. Bcrypt Passwords</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/bcrypt-passwords/</link><pubDate>Sat, 14 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/bcrypt-passwords/</guid><description>As a user, my password should not be stored in plain text.
Storing passwords in plain text is a significant security risk, as it exposes sensitive information in case of a data breach. To enhance security, passwords should be hashed before being stored in the database.
For this challenge use the bcrypt npm package to hash passwords before they are stored.
Additionally, update the login workflow to work with the now hashed passwords.</description></item><item><title>26. Dockerize Client and Service</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/docker/</link><pubDate>Sat, 14 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/docker/</guid><description>Create Dockerfiles for both the client and service folders, then use Docker Compose to make them work together in a single development environment. The client should be able to communicate with the service, and both should run seamlessly within their respective containers.
Ensure that all necessary dependencies are installed and that the services can interact as they would in a normal, non-Dockerized environment.
To complete this challenge, you&amp;rsquo;ll need to have docker installed.</description></item><item><title>28. Entity Relationship Diagram</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/schema-diagram/</link><pubDate>Sat, 14 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/schema-diagram/</guid><description>Using the provided Prisma schema file, create a Entity Relationship diagram using mermaid.js.
Your diagram should model the relationships between the different entities, including their attributes and how they connect (e.g., one-to-many, many-to-many).
Acceptance Criteria: The schema diagram should represent each entity from the provided schema file and at least one relationship between entities. Use Mermaid.js to clearly depict the relationships between tables (one-to-many, many-to-many, etc.). The diagram does not need to match every attribute, but core relationships and entities should be represented.</description></item><item><title>7. Dark Mode</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/dark-mode/</link><pubDate>Sat, 14 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/dark-mode/</guid><description>Utilize the prefers-color-scheme CSS media feature to conditionally adjust part of the website&amp;rsquo;s design to be darker or lighter based on the user&amp;rsquo;s system preference.
Choose any page in the app and make it so that page has a fully working dark mode.
Acceptance Criteria: The participant has successfully used the prefers-color-scheme media feature in CSS to implement conditional styling for dark mode on one full page.</description></item><item><title>8. Responsive Menu Page</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/carleton-central-responsive-menu/</link><pubDate>Sat, 14 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/carleton-central-responsive-menu/</guid><description>Redesign the Carleton Central &amp;ldquo;menu&amp;rdquo; page to be responsive and mobile-friendly. The current menu is built for desktop screens, and your task is to make it adjust and display properly on mobile devices with various screen sizes.
Use techniques such as CSS Flexbox, Grid, and media queries to ensure the layout adapts smoothly to smaller screens.
Note: Only worry about preserving links to the &amp;ldquo;BuildTimetable&amp;rdquo; and &amp;ldquo;Timetables&amp;rdquo; pages. You can remove the rest of the links on this screen (if you want).</description></item><item><title>0. Hello World: Update Page Title</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/hello-world/</link><pubDate>Sun, 01 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/hello-world/</guid><description>To complete this challenge, please update the websites page title.
Checkout: client/index.html
And update the page title to be any name that you feel will better represent your project.
&amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;link rel=&amp;#34;icon&amp;#34; type=&amp;#34;image/svg+xml&amp;#34; href=&amp;#34;/vite.svg&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt; - &amp;lt;title&amp;gt;Hack The Tunnels Project&amp;lt;/title&amp;gt; + &amp;lt;title&amp;gt;Your New Project Title&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;root&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script type=&amp;#34;module&amp;#34; src=&amp;#34;/src/main.tsx&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Acceptance Criteria: This challenge will be considered complete if the title of the webpage / the name of their &amp;ldquo;tab&amp;rdquo; is anything but &amp;ldquo;Hack The Tunnels Project&amp;rdquo;.</description></item><item><title>1. Create Your Own Login Page</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/redesign-login-page/</link><pubDate>Sun, 01 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/redesign-login-page/</guid><description>For this challenge, your team needs redesign the Carleton Central login page.
Checkout: client/src/pages/Login/Login.tsx to get started.
Additionally, today the email and password values used when clicking &amp;ldquo;sign in&amp;rdquo; are hard coded to be admin@email.com and password.
Utilize React&amp;rsquo;s useState hook to store custom values for email and password and update the attemptLogin login function to use the newly stored values.
Acceptance Criteria: The new login page must satisfy atleast (2) of these (4) possible criteria:</description></item><item><title>27. Sequence Diagram</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/e2e-sequence-diagram/</link><pubDate>Sun, 01 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/e2e-sequence-diagram/</guid><description>Pick one of the one of either Login or BuildTimetable pages and create a sequence diagram using mermaid.js
Your diagram should show messagings passing between the client, server, and database.
Acceptance Criteria: The sequence diagrams do not need to strictly follow any standard. This challenge is meant to make the participant look through the codebase to see how messages are being passed.</description></item><item><title>3. Update Central Layout</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/update-central-layout/</link><pubDate>Sun, 01 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/update-central-layout/</guid><description>For this challenge, your team needs to improve the &amp;ldquo;Central Layout&amp;rdquo;.
Checkout: client/src/layouts/Central/Central.tsx to get started.
The &amp;ldquo;Central Layout&amp;rdquo; is used by all of the pages themed to look like Carleton Central.
This means that any change may to this file will modify the look of all over pages using this layout.
In the example below, children is the contents of other pages being passed into this layout to be rendered.</description></item><item><title>4. Redesign 404 Page</title><link>https://ccss.carleton.ca/hackthetunnels/2024-2025/redesign-404-page/</link><pubDate>Sun, 01 Oct 2023 23:11:13 +0000</pubDate><guid>https://ccss.carleton.ca/hackthetunnels/2024-2025/redesign-404-page/</guid><description>For this challenge, your team needs to improve the &amp;ldquo;404 Page&amp;rdquo;.
This is the page that renders whenever you try to go to a route that does not exist in your app, ex: &amp;quot;http://localhost:5173/idontexist&amp;quot;.
Checkout: client/src/pages/NotFound/NotFound.tsx to get started.
Acceptance Criteria: The new page must have more than just the text &amp;ldquo;404&amp;rdquo;.
If you can&amp;rsquo;t think of any better improvements, just put a funny gif or something you feel represents the goal of this page.</description></item></channel></rss>